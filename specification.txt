===============================
`Citation Style Language 1.0`__
===============================
~~~~~~~~~~~~~~~~~~~~~~
Language Specification
~~~~~~~~~~~~~~~~~~~~~~

__ `Table of Contents`_

.. class:: fixed

   `citationstyles.org`__

__ http://citationstyles.org/

.. class:: version-links

    This version:
        http://citationstyles.org/downloads/specification-csl10-20110426.html
    Latest version:
        http://citationstyles.org/downloads/specification.html
    Previous versions: 
        - http://citationstyles.org/downloads/specification-csl10-20100321.html
        - http://citationstyles.org/downloads/specification-csl10-20100530.html

.. class:: contributors

   Author
       * Rintze M. Zelle
       
   Contributors
       * Frank G. Bennett, Jr.
       * Bruce D'Arcus

.. |link| image:: link.png


========

.. contents:: Table of Contents

========


Introduction
------------

The Citation Style Language (CSL) is an XML-based format to describe the
formatting of citations, notes and bibliographies, offering:

-  An open format
-  Compact and robust styles
-  Extensive support for style requirements
-  Automatic style localization
-  Infrastructure for style distribution and updating
-  Already over a thousand freely available styles (most are CC BY-SA licensed)

This specification, as well as additional documentation, schema, styles, and
locales, can be found at the CSL project home, |link| `citationstyles.org
<http://citationstyles.org>`_.

Terminology
~~~~~~~~~~~

The key words MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT,
RECOMMENDED, MAY, and OPTIONAL, are to be interpreted as described in |link|
`IETF RFC 2119 <http://tools.ietf.org/html/rfc2119>`_.

Namespacing
-----------

The CSL |link| `XML namespace URI <http://en.wikipedia.org/wiki/XML_Namespace>`_
is "http://purl.org/net/xbiblio/csl". The namespace prefix ``cs:`` is used
throughout this specification when referring to CSL elements, but is generally
omitted in favor of a default namespace declaration (set with
the ``xmlns`` attribute) on the root ``cs:style`` or ``cs:locale`` element.

File Types
----------

There are three different types of CSL files: independent and dependent styles
(which must have a ".csl" extension), and locale files, which follow the naming
pattern "locales-xx-XX.xml" ("xx-XX" representing a language dialect, e.g.
"en-US" for US English).

Independent Styles
~~~~~~~~~~~~~~~~~~

Independent styles contain formatting instructions for citations, notes and
bibliographies (they are generally not truly independent, as most rely on locale
files for (default) localization data).

Dependent Styles
~~~~~~~~~~~~~~~~

Dependent styles don't contain any formatting instructions, but function as
aliases or shortcuts. For example, dependent styles for journals that share the
same citation style (e.g. "Nature Biotechnology", "Nature Nanotechnology", etc.)
can link to a single independent style (e.g. "Nature Journals").

Locale Files
~~~~~~~~~~~~

Locale files each contain a complete set of localization data (consisting of
term translations as well as localized date formats and grammar options) for a
particular language dialect.

XML Declaration
---------------

Each style or locale should begin with an XML declaration, specifying the XML
version and character encoding. In most cases, the declaration will be:

.. sourcecode:: xml

    <?xml version="1.0" encoding="UTF-8"?>

Styles - Structure
------------------

The Root Element - ``cs:style``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The root element of styles is ``cs:style``. In independent styles, the element
carries the following attributes:

``class``
    Determines whether the style uses notes (value "note") or in-text citations
    ("in-text").

``default-locale`` (optional)
    Sets a default locale for style localization. Value must be a |link| `locale
    code <http://books.xmlschemata.org/relaxng/ch19-77191.html>`_.

``version``
    The CSL version of the style. Must be "1.0" for CSL 1.0-compatible styles.

In addition, ``cs:style`` may carry any of the `global options`_ and
`inheritable name options`_. In dependent styles, ``cs:style`` only carries the
``version`` attribute.

An example of ``cs:style`` for an independent style, preceded by the XML
declaration:

.. sourcecode:: xml

    <?xml version="1.0" encoding="UTF-8"?>
    <style xmlns="http://purl.org/net/xbiblio/csl" version="1.0" class="in-text" default-locale="fr-FR">

Child Elements of ``cs:style``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In independent styles, ``cs:style`` root element has the following child elements:

``cs:info``
    Must appear as the first child element of ``cs:style``. Contains the
    metadata describing the style (style name, ID, authors, etc.).

``cs:citation``
    Must appear once. Describes the formatting of in-text citations or notes.

``cs:bibliography`` (optional)
    May appear once. Describes the formatting of the bibliography.

``cs:macro`` (optional)
    May appear multiple times. Macros allow formatting instructions to be
    reused, keeping styles compact and maintainable.

``cs:locale`` (optional)
    May appear multiple times. Used to specify (overriding) localization data.
    
In `dependent styles`_, ``cs:style`` only contains a ``cs:info`` element.

Info
^^^^

The ``cs:info`` element contains the style's metadata. Its structure is based on
the |link| `Atom Syndication Format <http://tools.ietf.org/html/rfc4287>`_. In
independent styles, ``cs:info`` has the following child elements:

``cs:author`` and ``cs:contributor`` (optional)
    ``cs:author`` and ``cs:contributor``, used to respectively acknowledge style
    authors and contributors, may each be used multiple times. Within these
    elements, the child element ``cs:name`` must appear once, while ``cs:email``
    and ``cs:uri`` each may appear once. These child elements should contain
    respectively the name, email address and URI of the author or contributor.

``cs:category`` (optional)
    Styles may be assigned one or more categories. ``cs:category`` may be used
    once to describe how in-text citations are rendered, using the
    ``citation-format`` attribute set to one of the following values:
    
    -  "author-date" - e.g. "... (Doe, 1999)"
    -  "author" - e.g. "... (Doe)"
    -  "numeric" - e.g. "... [1]"
    -  "label" - e.g. "... [doe99]"
    -  "note" - the citation appears as a footnote or endnote
    
    ``cs:category`` may be used multiple times with the ``field`` attribute, set
    to one of the discipline `categories`_, to indicates the field(s) for which
    the style is relevant.

``cs:id``
    Must appear once. The element should contain a URI to establish the identity
    of the style. A stable, unique and dereferenceable URI is desired for
    publicly available styles.

``cs:issn``/``cs:eissn``/``cs:issnl`` (optional)
    The ``cs:issn`` element may be used multiple times to indicate the ISSN
    identifier(s) of the journal for which the style was written. The
    ``cs:eissn`` and ``cs:issnl`` elements may each be used once for the eISSN
    and |link| `ISSN-L <http://www.issn.org/2-22637-What-is-an-ISSN-L.php>`_
    identifiers, respectively.

``cs:link`` (optional)
    May be used multiple times. ``cs:link`` must carry two attributes: ``href``,
    set to a URI (usually a URL), and ``rel``, whose value indicates how the URI
    relates to the style. The possible values of ``rel``:
    
    -  "self" - URI of the current style itself
    -  "template" - URI of the style from which the current style is derived
    -  "documentation - URI of (online) style documentation
    
    The ``cs:link`` element may contain textual content to describe the link,
    and may carry the ``xml:lang`` attribute to specify the language of either
    the link description or of the link target (the value must be a |link|
    `xsd:language locale code
    <http://books.xmlschemata.org/relaxng/ch19-77191.html>`_).

``cs:published`` (optional)
    May appear once. The contents of ``cs:published`` must be a |link|
    `timestamp <http://books.xmlschemata.org/relaxng/ch19-77049.html>`_,
    indicating when the style was initially created or made available.

``cs:rights`` (optional)
    May appear once. The contents of ``cs:rights`` specifies the license under
    which the style file is released. See, e.g. the |link| `Creative Commons
    <http://creativecommons.org/license/>`_. The element may carry a ``license``
    attribute to specify the URI of the license, and an ``xml:lang`` attribute
    to specify the language of the content (the value must be an |link|
    `xsd:language locale code
    <http://books.xmlschemata.org/relaxng/ch19-77191.html>`_).

``cs:summary`` (optional)
    May appear once. The contents of ``cs:summary`` gives a (short) description
    of the style. The element may carry a ``xml:lang`` attribute to specify the
    language of the content (the value must be an |link| `xsd:language locale
    code <http://books.xmlschemata.org/relaxng/ch19-77191.html>`_).

``cs:title``
    Must appear once. The contents of ``cs:title`` should be the name of the
    style as shown to users. The element may carry a ``xml:lang`` attribute to
    specify the language of the content (the value must be an |link|
    `xsd:language locale code
    <http://books.xmlschemata.org/relaxng/ch19-77191.html>`_).

``cs:title-short`` (optional)
    May appear once. The contents of ``cs:title-short`` should be a shortened
    style name (e.g. "APA"). The element may carry a ``xml:lang`` attribute to
    specify the language of the content (the value must be an |link|
    `xsd:language locale code
    <http://books.xmlschemata.org/relaxng/ch19-77191.html>`_).

``cs:updated``
    May appear once. The optional contents of ``cs:updated`` must be a |link|
    `timestamp <http://books.xmlschemata.org/relaxng/ch19-77049.html>`_.
    
In `dependent styles`_, ``cs:author``, ``cs:contributor`` and ``cs:rights`` are
not allowed. In addition, ``cs:link`` must be used with ``rel`` set to
"independent-parent", with the URI of the independent parent style set on
``href``. ``cs:link`` may not be used with ``rel`` set to "template" and
"documentation", but "self" is allowed to indicate the URI of the dependent
style itself.

An example of ``cs:info`` for an independent style:

.. sourcecode:: xml

    <info>
      <title>Style Title</title>
      <id>http://www.zotero.org/styles/style-title</id>
      <link href="http://www.zotero.org/styles/style-title" rel="self"/>
      <author>
        <name>Author Name</name>
        <email>name@domain.com</email>
        <uri>http://www.domain.com/name</uri>
      </author>
      <category citation-format="author-date"/>
      <category field="zoology"/>
      <updated>2008-10-29T21:01:24+00:00</updated>
      <summary>Style for Some Journal</summary>
      <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work
      is licensed under a Creative Commons Attribution-Share Alike 3.0 Unported
      License</rights>
    </info>

Citation
^^^^^^^^

The ``cs:citation`` element describes the formatting of citations, which consist
of one or more references to bibliographic sources (these individual references
are here referred to as "cites"). Citations appear in the form of either in-text
citations (in the author (e.g. "[Doe]"), author-date ("[Doe 1999]"), label
("[doe99]") or number ("[1]") format) or notes. The required ``cs:layout`` child
element describes what, and how, bibliographic data should be included in the
citations (see `Layout <#layout>`_). ``cs:layout`` may be preceded by a
``cs:sort`` element, which can be used to specify how cites within a citation
should be sorted (see `Sorting`_). The ``cs:citation`` element may carry
attributes for the formatting of citations and names (see `Citation-specific
Options`_ and `Inheritable Name Options`_). An example of a ``cs:citation``
element:

.. sourcecode:: xml

    <citation option="option-value">
      <sort>
        <!-- sort keys -->
      </sort>
      <layout>
        <!-- rendering elements -->
      </layout>
    </citation>

**A note to developers of CSL processors** Note styles are unique in that
citations may effectively become full sentences. Because of this, the first
character of a citation should be uppercased when there is no preceding text in
the footnote. In all other cases (e.g. when a citation is inserted into the
middle of a pre-existing footnote), the citation should be printed as is.

Bibliography
^^^^^^^^^^^^

The ``cs:bibliography`` element describes the formatting of bibliographies,
which list one or more bibliographic sources. The required ``cs:layout`` child
element describes how each reference should be formatted. ``cs:layout`` may be
preceded by a ``cs:sort`` element, which can be used to specify how references
within the bibliography should be sorted (see `Sorting`_). The
``cs:bibliography`` element may carry attributes for the formatting of
bibliographies and names (see `Bibliography-specific Options`_ and `Inheritable
Name Options`_). An example of a ``cs:bibliography`` element:

.. sourcecode:: xml

    <bibliography option="option-value">
      <sort>
        <!-- sort keys -->
      </sort>
      <layout>
        <!-- rendering elements -->
      </layout>
    </bibliography>

Macro
^^^^^

Macros, defined with ``cs:macro`` elements, contain formatting instructions.
Macros can be called with ``cs:text`` from within other macros and the
``cs:layout`` element of ``cs:citation`` and ``cs:bibliography``, and with
``cs:key`` from within ``cs:sort`` of ``cs:citation`` and ``cs:bibliography``.
It is recommended to place macros after any ``cs:locale`` elements and before
the ``cs:citation`` element.

Macros are referenced by the value of the required ``name`` attribute on
``cs:macro``. The ``cs:macro`` element must contain one or more `rendering
elements`_.

The use of macros can improve style readability, compactness and
maintainability. It is recommended to keep the contents of ``cs:citation`` and
``cs:bibliography`` compact and agnostic of item types (e.g. books, journal
articles, etc.) by depending on macro calls. To allow for easy reuse of macros
in other styles, it is recommended to use common macro names.

In the example below, cites consist of the item title, rendered in italics when
the item type is "book":

.. sourcecode:: xml

    <style>
      <macro name="title">
        <choose>
          <if type="book">
            <text variable="title" font-style="italic"/>
          </if>
          <else>
            <text variable="title"/>
          </else>
        </choose>
      </macro>
      <citation>
        <layout>
          <text macro="title"/>
        </layout>
      </citation>
    </style>

Locale
^^^^^^

Localization data, which by default is drawn from the locale files, can be
(re)defined with ``cs:locale`` elements. It is recommended to place these after
the ``cs:info`` element.

The value of the optional ``xml:lang`` attribute on ``cs:locale``, which must be
set to an |link| `xsd:language locale code
<http://books.xmlschemata.org/relaxng/ch19-77191.html>`_, determines which
languages or language dialects are affected (see also `Locale Prioritization`_).

See `Terms`_, `Localized Dates`_ and `Localized Options`_ for
additional details on the use of ``cs:locale``.

An example of ``cs:locale`` in a style:

.. sourcecode:: xml

    <style>
      <locale xml:lang="en">
        <terms>
          <term name="editortranslator" form="short">
            <single>ed. &amp; trans.</single>
            <multiple>eds. &amp; trans.</multiple>
          </term>
        </terms>
      </locale>
    </style>

Locale Prioritization
'''''''''''''''''''''

Locale prioritization concerns the fallback behavior of localization data.
Locale files provide localization data for language dialects (e.g. "en-US" for
American English), whereas ``cs:locale`` elements in styles can either lack the
``xml:lang`` attribute, or have it set to either a language (e.g. "en" for
English) or language dialect. The ``cs:locale`` elements are typically used in
styles to redefine the localization data provided via the "locales-xx-XX.xml"
files, including only the localization data that should be redefined.

Language dialects can share the same language code. In such cases, one language
dialect is assigned the primary dialect. The locale files with matching language
codes include: de-DE (primary) and de-AT, de-CH (secondary); en-US (primary) and
en-GB (secondary); pt-PT (primary) and pt-BR (secondary); and zh-CN (primary)
and zh-TW (secondary).

The fallback behavior can best be described with an example. If the chosen
output locale is "de-AT" (Austrian German), localizable elements (a term, date
format or formatting option) are individually drawn from the following sources,
in decreasing order of priority:

A. In-style ``cs:locale`` elements

   1. ``xml:lang`` set to chosen language dialect, "de-AT"
   2. ``xml:lang`` set to matching language, "de" (German)
   3. ``xml:lang`` not set

B. Locale files

   4. ``xml:lang`` set to chosen language dialect, "de-AT"
   5. ``xml:lang`` set to matching primary language dialect, "de-DE" (Standard
      German) (only applicable when the chosen locale is a secondary language
      dialect)
   6. ``xml:lang`` set to "en-US" (American English), the ultimate fallback

Note that fallback stops whenever a term is defined, even if it consists of an
empty string (e.g. <term name="and"/> or <term name="and"></term>).

Locale Files - Structure
------------------------

While localization data can be included in styles (see `Locale`_), locale files
conveniently provide sets of default localization data, consisting of terms,
date formats and grammar options.

Each locale file contains the localization data for a single language dialect.
The ``cs:locale`` root element must carry the ``xml:lang`` attribute. Its value,
which should match the "xx-XX" `locale code
<http://books.xmlschemata.org/relaxng/ch19-77191.html>`_ of the
"locales-xx-XX.xml" file name, specifies the language dialect for which
localization data is provided. Also required is the ``version`` attribute,
indicating the CSL version of the locale file (must be "1.0" for CSL
1.0-compatible locale files). Locale files have the same requirements for
`namespacing`_ as styles. The ``cs:locale`` element has three required child
elements, which are described in the sections below: ``cs:terms``, ``cs:date``
and ``cs:style-options``. An example of the (incomplete) contents of a locale
file:

.. sourcecode:: xml

    <?xml version="1.0" encoding="UTF-8"?>
    <locale xml:lang="en-US" version="1.0" xmlns="http://purl.org/net/xbiblio/csl">
      <style-options punctuation-in-quote="true"/>
      <date form="text">
        <date-part name="month" suffix=" "/>
        <date-part name="day" suffix=", "/>
        <date-part name="year"/>
      </date>
      <date form="numeric">
        <date-part name="year"/>
        <date-part name="month" form="numeric" prefix="-" range-delimiter="/"/>
        <date-part name="day" prefix="-" range-delimiter="/"/>
      </date>
      <terms>
        <term name="no date">n.d.</term>
        <term name="et-al">et al.</term>
        <term name="page">
          <single>page</single>
          <multiple>pages</multiple>
        </term>
        <term name="page" form="short">
          <single>p.</single>
          <multiple>pp.</multiple>
        </term>
      </terms>
    </locale>

Terms
~~~~~

Terms are localized strings (e.g. with English and German locales, the "and"
term is rendered as "and" and "und", respectively). Terms are defined with
``cs:term`` elements, child elements of ``cs:terms``, itself a child element of
``cs:locale``. Each ``cs:term`` element must carry a ``name`` attribute, set to
a term (available terms are listed in `Appendix III - Terms`_).

Terms are either simple, in which case the content of ``cs:term`` is the
localized string, or compounded, in which case ``cs:term`` has ``cs:single`` and
``cs:multiple`` child elements (their content consists respectively of the
singular and plural variant of the term in question (e.g. "page" and "pages")).
Terms may be defined for multiple forms, using multiple ``cs:term`` elements for
the same term with the optional ``form`` attribute set to:

-  "long" - (default), e.g. "editor" and "editors" for the "editor" term
-  "short" - e.g. "ed." and "eds." for the term "editor"
-  "verb" - e.g. "edited by" for the term "editor"
-  "verb-short" - e.g. "ed." for the term "editor"
-  "symbol" - e.g. "§" for the term "section"

If a term is called in a form that is undefined, even after locale fallback (see
`Locale Prioritization`_), there is fallback to other forms: "verb-short" first
falls back to "verb", "symbol" first falls back to "short", and "verb" and
"short" both fall back to "long". Terms for which no locale or form fallback is
available are rendered as empty strings.

Term content may not contain markup such as LaTeX or HTML. Characters that
should be superscripted can be inserted as `superscripted Unicode characters`__.

__ http://unicode.org/reports/tr30/datafiles/SuperscriptFolding.txt

Localized Dates
~~~~~~~~~~~~~~~

Localized date formats are defined with ``cs:date`` elements, child elements of
``cs:locale``. Two formats can be defined: a "numeric" format (e.g.
"12-15-2005") and a "text" format (e.g. "December 15, 2005"). The format is set
on ``cs:date`` with the required ``form`` attribute.

A date format is defined using ``cs:date-part`` elements as child elements of
``cs:date``. Each ``cs:date-part`` element must carry a ``name`` attribute, set
to ``day``, ``month`` or ``year``. The element order is the display order.
Additional formatting may be applied with `formatting`_ attributes on the
``cs:date`` and ``cs:date-part`` elements, as well as several
``cs:date-part``-specific attributes (see `Date-part`_). The `delimiter`_
attribute may be set on ``cs:date`` to delimit the ``cs:date-part`` elements,
and `affixes`_ may be applied to the ``cs:date-part`` elements.

**Note** It is not allowed to use affixes on ``cs:date`` when defining localized
date formats. This separates locale-specific affixes (set on the
``cs:date-part`` elements) from any style-specific affixes (set on the calling
``cs:date`` element), such as parentheses. An example of a macro using a
localized date format:

.. sourcecode:: xml

      <macro name="issued">
       <date variable="issued" form="numeric" prefix="(" suffix=")"/>
      </macro>

Localized Options
~~~~~~~~~~~~~~~~~

There is one localized option, ``punctuation-in-quote`` (see `Locale Options`_).
This global option (affecting both citation and bibliography output) is set as
an attribute on ``cs:style-options``, a child element of ``cs:locale``.

Rendering Elements
------------------

Rendering elements specify which pieces of bibliographic data are included in
citations and bibliographies, the order in which these appear, and, to an
extent, their formatting.

Layout
~~~~~~

The ``cs:layout`` rendering element is a required child element of
``cs:citation`` and ``cs:bibliography``. It must contain one or more of the
other rendering elements described below, and may carry `affixes`_ and
`formatting`_ attributes. When used within ``cs:citation``, the `delimiter`_
attribute may be used to separate multiple cites in a single citation. For
example, citations like "(1, 2)" can be achieved with:

.. sourcecode:: xml

    <citation>
      <layout prefix="(" suffix=")" delimiter=", ">
        <text variable="citation-number"/>
      </layout>
    </citation>

Text
~~~~

Each ``cs:text`` rendering element outputs text from a particular source. The
element must carry an attribute specifying the source type (the attribute name)
and source identifier (the attribute value). For example,

.. sourcecode:: xml

    <text variable="title"/>

renders the title variable ("variable" is the source type, and "title" is the
source identifier). The available source types are:

-  ``variable`` - the text contents of one of the `standard variables`_. The
   ``form`` attribute may be set to either "long" (the default) or "short" to
   select the long or short form of a variable (e.g. the full or short title).
-  ``macro`` - the text generated by a macro. The attribute value must match the
   value of the ``name`` attribute of a ``cs:macro`` element.
-  ``term`` - the text of a term (see `Appendix III - Terms`_ and `Terms`_). The
   ``plural`` attribute may be set to either "false" (the default) or "true" to
   select the singular or plural variant of a term. The ``form`` attribute may
   be set to select a form variant: "long" (the default), "short", "verb",
   "verb-short" or "symbol".
-  ``value`` - verbatim text. The attribute value is the text to appear in the
   output.

``cs:text`` may also carry `affixes`_, `display`_, `formatting`_, `quotes`_,
`strip-periods`_ and `text-case`_ attributes.

Date
~~~~

The ``cs:date`` rendering element outputs dates, in a localized or non-localized
format. The date variable (see `Date Variables`_) to be rendered is selected
with the ``variable`` attribute.

Localized date formats (see `Localized Dates`_) are selected with the ``form``
attribute. This optional attribute must be set to either "numeric" (for numeric
date formats, e.g. "12-15-2005"), or "text" (for date formats with a non-numeric
month, e.g. "December 15, 2005"). Localized dates can be customized in two ways.
First, the ``date-parts`` attribute may be used to specify which
``cs:date-part`` elements are shown. The possible values are:

-  "year-month-day" - (default), render year, month and day
-  "year-month" - render year and month
-  "year" - render only year

Secondly, ``cs:date`` may include one or more ``cs:date-part`` elements (see
`Date-part`_). The attributes set on these elements override those specified for
the localized date formats (e.g. to get abbreviated months for all locales, the
``form`` attribute of the month-``cs:date-part`` element can be set to "short").
These ``cs:date-part`` elements do not affect which, or in what order,
``cs:date-part`` elements are included in the rendered date. The
``cs:date-part`` elements may not carry attributes for `affixes`_, as these are
considered to be locale-specific.

Non-localized date formats are self-contained: only the included
``cs:date-part`` elements are rendered, in the specified order. Here ``cs:date``
lacks both the ``form`` and ``date-parts`` attributes. The ``cs:date-part``
elements may carry attributes for `affixes`_ and `formatting`_, while
``cs:date`` may carry a `delimiter`_ attribute to separate the ``cs:date-part``
elements.

For both localized and non-localized dates, `affixes`_, `display`_ and
`formatting`_ attributes may be specified for the ``cs:date`` element.

Date-part
^^^^^^^^^

The ``cs:date-part`` elements control how date parts are rendered. Unless the
parent ``cs:date`` element specifies the use of a localized date format, they
also determine which, and in what order, date parts appear. Each
``cs:date-part`` element describes a single date part, identified by the value
of the required ``name`` attribute:

"day"
    For "day", ``cs:date-part`` may carry the ``form`` attribute, with values:
    
    -  "numeric" - (default), e.g. "1"
    -  "numeric-leading-zeros" - e.g. "01"
    -  "ordinal" - e.g. "1st"

"month"
    For "month", ``cs:date-part`` may carry the `strip-periods`_ and ``form``
    attributes. Abbreviated months (e.g. "Jan.", "Feb.") are `terms`_
    and include periods by default (if applicable). These periods are removed
    when `strip-periods`_ is set to "true" ("false" is the default). The
    ``form`` attribute can be set to:
    
    -  "long" - (default), e.g. "January"
    -  "short" - e.g. "Jan."
    -  "numeric" - e.g. "1"
    -  "numeric-leading-zeros" - e.g. "01"

"year"
    For "year", ``cs:date-part`` may carry the ``form`` attribute, with values:
    
    -  "long" - (default), e.g. "2005"
    -  "short" - e.g. "05"

``cs:date-part`` may also carry the `formatting`_, `text-case`_ and
``range-delimiter`` (see `Date Ranges`_) attributes. Attributes for `affixes`_
are allowed, except when ``cs:date`` calls a localized date format.

Date Ranges
^^^^^^^^^^^

By default, date ranges are delimited by en-dashes (e.g. "May |--| July 2008").
The ``range-delimiter`` attribute may be used to specify custom date range
delimiters. The attribute value set on the largest date-part ("day", "month" or
"year") that differs between the two dates of the date range will then be used
instead of the en-dash. For example,

.. sourcecode:: xml
    
    <style>
      <citation>
        <layout>
          <date variable="issued">
            <date-part name="month" suffix=" "/>
            <date-part name="year" range-delimiter="/"/>
          </date>
        </layout>
      </citation>
    </style>

would result in "May |--| July 2008" and "May 2008/June 2009".

.. |--| unicode:: U+2013
   :trim:

AD and BC
^^^^^^^^^

The terms "ad" and "bc" (Anno Domini and Before Christ) are automatically
appended to years: "bc" is added to negative years (e.g. "-2500" becomes
"2500BC"), while "ad" is added to positive years of less than four digits ("79"
becomes "79AD").

Seasons
^^^^^^^

If a date variable holds a season instead of a month, a season term ("season-01"
to "season-04", respectively Spring, Summer, Autumn and Winter) is substituted
for the month date-part. E.g.,

.. sourcecode:: xml
    
    <style>
      <citation>
        <layout>
          <date variable="issued">
            <date-part name="month" suffix=" "/>
            <date-part name="year"/>
          </date>
        </layout>
      </citation>
    </style>

would result in "May 2008" and "Winter 2009".

Uncertain Dates
^^^^^^^^^^^^^^^

Special formatting can be applied to uncertain dates by using the
``is-uncertain-date`` conditional (see `Choose`_) and the "circa" term. The
conditional tests "true" when a date is flagged as uncertain. For example,

.. sourcecode:: xml

    <style>
      <citation>
        <layout>
          <choose>
            <if is-uncertain-date="issued">
              <text term="circa" form="short" suffix=" "/>
            </if>
          </choose>
          <date variable="issued">
            <date-part name="year"/>
          </date>
        </layout>
      </citation>
    </style>

would result in "2005" (normal date) and "ca. 2003" (uncertain date).

Number
~~~~~~

The ``cs:number`` rendering element outputs numeric content of one of the
`Number variables`_ (selected with the required ``variable`` attribute). While
all number variables can also be rendered with ``cs:text``, ``cs:number`` offers
options to format (extracted) numbers via the optional ``form`` attribute, with
values:

-  "numeric" - (default), e.g. "1", "2", "3"
-  "ordinal" - e.g. "1st", "2nd", "3rd"
-  "long-ordinal" - e.g. "first", "second", "third"
-  "roman" - e.g. "i", "ii", "iii"

If a variable rendered with ``cs:number`` contains both numeric and non-numeric
text, only the first number is extracted and used for rendering (e.g. "6" when
the variable content is "Volume 6"). Variables containing only non-numeric text
(e.g. "Special edition"), are rendered in full. Variables can be tested for
numeric content with the ``is-numeric`` conditional, e.g. "12th edition" tests
"true" while "third edition" tests "false" (see `Choose`_).

``cs:number`` may carry `affixes`_, `display`_, `formatting`_ and `text-case`_
attributes.

Names
~~~~~

The ``cs:names`` rendering element outputs the contents of one or more `name
variables`_ (selected with the required ``variable`` attribute), each of which
can contain multiple names (e.g. the "author" variable contains all the author
names of the cited item). If multiple variables are selected (separated by
single spaces, see example below), each variable is independently rendered in
the order specified, with one exception: when the selection consists of "editor"
and "translator", and when the contents of these two name variables is
identical, then the contents of only one name variable is rendered. In addition,
the "editortranslator" term is used if the ``cs:names`` element contains a
``cs:label`` element, replacing the default "editor" and "translator" terms
(e.g. resulting in "Doe (editor & translator)"). The `delimiter`_ attribute may
be set on ``cs:names`` to separate the names of the different name variables
(e.g. the semicolon in "Doe, Smith (editors); Johnson (translator)").

.. sourcecode:: xml

    <names variable="editor translator" delimiter="; ">
      <label prefix=" (" suffix=")"/>
    </names>

``cs:names`` has four child elements (discussed below): ``cs:name``,
``cs:et-al``, ``cs:substitute`` and ``cs:label``. The ``cs:names`` element may
carry `affixes`_, `display`_ and `formatting`_ attributes.

Name
^^^^

The ``cs:name`` element, an optional child element of ``cs:names``, can be used
to describe the formatting of individual names, and the separation of names
within a name variable. ``cs:name`` may carry the following attributes:

``and``
    Specifies the delimiter between the second to last and last name of the
    names in a name variable. Allowed values are "text" (selects the "and" term,
    e.g. "Doe, Johnson and Smith") and "symbol" (selects the ampersand, e.g.
    "Doe, Johnson & Smith").

``delimiter``
    Specifies the text string used to separate names in a name variable. Default
    is ", " (e.g. "Doe, Smith").

``delimiter-precedes-et-al``
    Determines when the name delimiter or a space is used between a truncated
    name list and the "et-al" (or "and others") term in case of et-al
    abbreviation. Allowed values:
    
    -  "contextual" - (default), name delimiter is only used for name lists
       truncated to two or more names
       
       - 1 name: "J. Doe et al."
       - 2 names: "J. Doe, S. Smith, et al."
    
    -  "always" - name delimiter is always used
       
       - 1 name: "J. Doe, et al."
       - 2 names: "J. Doe, S. Smith, et al."
    
    -  "never" - name delimiter is never used
       
       - 1 name: "J. Doe et al."
       - 2 names: "J. Doe, S. Smith et al."

``delimiter-precedes-last``
    Determines when the name delimiter is used to separate the second to last
    and the last name in name lists (if ``and`` is not set, the name delimiter
    is always used, regardless of the value of ``delimiter-precedes-last``).
    Allowed values:
    
    -  "contextual" - (default), name delimiter is only used for name lists
       with three or more names
       
       - 2 names: "J. Doe and T. Williams"
       - 3 names: "J. Doe, S. Smith, and T. Williams"
    
    -  "always" - name delimiter is always used
       
       - 2 names: "J. Doe, and T. Williams"
       - 3 names: "J. Doe, S. Smith, and T. Williams"
    
    -  "never" - name delimiter is never used
       
       - 2 names: "J. Doe and T. Williams"
       - 3 names: "J. Doe, S. Smith and T. Williams"

``et-al-min`` / ``et-al-use-first``
    Use of these two attributes enables et-al abbreviation. If the number of
    names in a name variable matches or exceeds the number set on ``et-al-min``,
    the rendered name list is truncated after reaching the number of names set
    on ``et-al-use-first``. The "et-al" (or "and others") term is appended to
    truncated name lists (see also `Et-al`_). By default, when a name list is
    truncated to a single name, the name and the "et-al" (or "and others") term
    are separated by a space (e.g. "Doe et al."). When a name list is truncated
    to two or more names, the name delimiter is used (e.g. "Doe, Smith, et
    al."). This behavior can be changed with the ``delimiter-precedes-et-al``
    attribute.
    
``et-al-subsequent-min`` / ``et-al-subsequent-use-first``
    If used, the values of these attributes replace those of respectively
    ``et-al-min`` and ``et-al-use-first`` for subsequent cites (cites
    referencing earlier cited items).

``et-al-use-last``
    When set to "true" (the default is "false"), name lists truncated by et-al
    abbreviation are followed by the name delimiter, the ellipsis character, and
    the last name of the original name list. This is only possible when the
    original name list has at least two more names than the truncated name list
    (for this the value of ``et-al-use-first``/``et-al-subsequent-min`` must be
    at least 2 less than the value of
    ``et-al-min``/``et-al-subsequent-use-first``). An example:
    
    ::
    
        A. Goffeau, B. G. Barrell, H. Bussey, R. W. Davis, B. Dujon, H.
        Feldmann, … S. G. Oliver

The remaining attributes, discussed below, only affect personal names. Personal
names require a "family" name-part, and may also contain "given", "suffix",
"non-dropping-particle" and "dropping-particle" name-parts. These name-parts are
defined as:

-  "family" - surname minus any particles and suffixes
-  "given" - given names, either full ("John Edward") or initialized ("J. E.")
-  "suffix" - name suffix, e.g. "Jr." in "John Smith Jr." and "III" in "Bill
   Gates III"
-  "non-dropping-particle" - name particles that are not dropped when only the
   surname is shown ("de" in the Dutch surname "de Koning") but which may be
   treated separately from the family name, e.g. for sorting
-  "dropping-particle" - name particles that are dropped when only the surname
   is shown ("van" in "Ludwig van Beethoven", which becomes "Beethoven")

The attributes affecting personal names:

``form``
    Specifies whether all the name-parts of personal names should be displayed
    (value "long", the default), or only the family name and the
    non-dropping-particle (value "short"). A third value, "count", returns the
    total number of names that would otherwise be rendered by the use of the
    ``cs:names`` element (taking into account the effects of et-al abbreviation
    and editor/translator collapsing), which allows for advanced `sorting`_.

``initialize-with``
    When set, given names are converted to initials. The attribute value is
    added after each initial ("." results in "J.J. Doe"). For compound given
    names (e.g. "Jean-Luc"), hyphenation of the initials can be controlled with
    the global ``initialize-with-hyphen`` option (see `Hyphenation of
    Initialized Names`_).

``name-as-sort-order``
    Specifies that names should be displayed with the given name following the
    family name (e.g. "John Doe" becomes "Doe, John"). The attribute has two possible values:
    
    - "first" - attribute only has an effect on the first name of each name
      variable 
    - "all" - attribute has an effect on all names
    
    Note that even when ``name-as-sort-order`` changes the name-part order, the
    display order is not necessarily the same as the sorting order for names
    containing particles and suffixes (see `Name-part order`_). Also,
    ``name-as-sort-order`` only affects names written in the latin or Cyrillic
    alphabets. Names written in other alphabets (e.g. Asian scripts) are always
    displayed with the family name preceding the given name.

``sort-separator``
    Sets the delimiter for name-parts that have switched positions as a result
    of ``name-as-sort-order``. The default value is ", " ("Doe, John"). As is
    the case for ``name-as-sort-order``, this attribute only affects names
    written in the latin or Cyrillic alphabets.

``cs:name`` may also carry `affixes`_ and `formatting`_ attributes.

Name-part Order
'''''''''''''''

The order of name-parts depends on the values of the ``form`` and
``name-as-sort-order`` attributes on ``cs:name``, the value of the
``demote-non-dropping-particle`` attribute on ``cs:style`` (one of the `global
options`_), and the alphabet of the individual name. Note that the display and
sorting order of name-parts often differs. An overview of the possible orders:

**Display order of latin/Cyrillic names**

----

:Conditions: ``form`` set to "long"
:Order:
    1) given
    2) dropping-particle
    3) non-dropping-particle
    4) family
    5) suffix

:Example: [Jean] [de] [La] [Fontaine] [III]

----

:Conditions: ``form`` set to "long", name-as-sort-order active,
             ``demote-non-dropping-particle`` set to "never" or "sort-only"
:Order:
    1) non-dropping-particle
    2) family
    3) given
    4) dropping-particle
    5) suffix

:Example: [La] [Fontaine], [Jean] [de], [III]

----

:Conditions: ``form`` set to "long", name-as-sort-order active,
             ``demote-non-dropping-particle`` set to "display-and-sort"
:Order:
    1) family
    2) given
    3) dropping-particle
    4) non-dropping-particle
    5) suffix

:Example: [Fontaine], [Jean] [de] [La], [III]

----

:Conditions: ``form`` set to "short"
:Order:
    1) non-dropping-particles
    2) family

:Example: [La] [Fontaine]

----

**Sorting order of latin/Cyrillic names**

N.B. The sort keys are listed in descending order of priority.

----

:Conditions: ``demote-non-dropping-particle`` set to "never"
:Order:
    1) non-dropping-particle + family
    2) dropping-particle
    3) given
    4) suffix

:Example: [La Fontaine] [de] [Jean] [III]

----

:Conditions: ``demote-non-dropping-particle`` set to "sort-only" or
             "display-and-sort"
:Order:
    1) family
    2) dropping-particle + non-dropping-particle
    3) given
    4) suffix

:Example: [Fontaine] [de La] [Jean] [III]

----

**Display and sorting order of non-latin/Cyrillic names**

----

:Conditions: ``form`` set to "long"
:Order:
    1) family
    2) given

:Example: |Mao Zedong| [Mao Zedong]

.. |Mao Zedong| unicode:: U+6bdb U+6cfd U+4e1c

----

:Conditions: ``form`` set to "short"
:Order:
    1) family

:Example: |Mao| [Mao]

.. |Mao| unicode:: U+6bdb

----

Non-personal names lack name-parts and are sorted as is, although English
articles ("a", "an" and "the") at the start of the name are stripped. For
example, "The New York Times" sorts as "New York Times".

Name-part Formatting
''''''''''''''''''''

The ``cs:name`` element may contain one or two ``cs:name-part`` child elements
for name-part-specific formatting. ``cs:name-part`` must carry the ``name``
attribute, set to either "given" or "family".

If set to "given", `formatting`_ and `text-case`_ attributes on ``cs:name-part``
affect the "given" and "dropping-particle" name-parts. `affixes`_ surround the
"given" name-part, enclosing any demoted name particles for inverted names.

If set to "family", `formatting`_ and `text-case`_ attributes affect the
"family" and "non-dropping-particle" name-parts. `affixes`_ surround the
"family" name-part, enclosing any preceding name particles, as well as the
"suffix" name-part for non-inverted names.

The "suffix" name-part is not subject to name-part formatting. The use of
``cs:name-part`` elements does not influence which, or in what order, name-parts
are rendered. An example, yielding names like "Jane DOE":

.. sourcecode:: xml

    <names variable="author">
      <name>
        <name-part name="family" text-case="uppercase"/>
      </name>
    </names>

Et-al
^^^^^

Et-al abbreviation, controlled via the ``et-al-...`` attributes (see `Name`_),
can be further customized with the optional ``cs:et-al`` element, which must
follow the ``cs:name`` element (if present). The ``term`` attribute may be set
to either "et-al" (the default) or to "and others" to use either term. The
`affixes`_ and `formatting`_ attributes may also be used, for example to
italicize the "et-al" term:

.. sourcecode:: xml

    <names variable="author">
      <et-al term="and others" font-style="italic"/>
    </names>

Substitute
^^^^^^^^^^

The optional ``cs:substitute`` element, which must be included as the last child
element of ``cs:names``, adds substitution in case the `name variables`_
specified in the parent ``cs:names`` element are empty. The substitutions are
specified as child elements of ``cs:substitute``, and must consist of one or
more `rendering elements`_ (with the exception of ``cs:layout``). A shorthand
version of ``cs:names`` without child elements, which inherits the attributes
values set on the ``cs:name`` and ``cs:et-al`` child elements of the original
``cs:names`` element, may also be used. If ``cs:substitute`` contains multiple
child elements, the first element to return a non-empty result is used for
substitution. Substituted variables are suppressed in the rest of the output to
prevent duplication. An example, where an empty "author" name variable is
substituted by the "editor" name variable, or, when no editors exist, by the
"title" macro:

.. sourcecode:: xml

    <macro name="author">
      <names variable="author">
        <substitute>
          <names variable="editor"/>
          <text macro="title"/>
        </substitute>
      </names>
    </macro>

Label in ``cs:names``
^^^^^^^^^^^^^^^^^^^^^

The optional ``cs:label`` element (see `label`_) must be included after the
``cs:name`` and ``cs:et-al`` elements, but before the ``cs:substitute`` element.
When used as a child element of ``cs:names``, ``cs:label`` does not carry the
``variable`` attribute; instead, it renders the term matching the rendered name
variable (e.g. "editors" in "Doe and Smith (editors)").

Label
~~~~~

The ``cs:label`` rendering element outputs the term matching the variable
selected with the required ``variable`` attribute, which must be set to either
"page" or "locator" (in the case of "locator", the rendered term matches the
`locators`_ type). Terms are only rendered for non-empty variables, and match
the pluralization of the variable content. The example below renders the
contents of the "page" variable, preceded by the singular form of the "page"
term for a single page ("page 5"), or the plural form for a page range ("pages
5-7").

.. sourcecode:: xml

    <group delimiter=" ">
      <label variable="page" form="long"/>
      <text variable="page"/>
    </group>

``cs:label`` may carry `affixes`_, `formatting`_, `text-case`_ and
`strip-periods`_ attributes, as well as:

``form``
    Selects the form of the term, with allowed values:
    
    -  "long" - (default), e.g. "editor"/"editors" for the "editor" term
    -  "verb" - e.g. "edited by" for the "editor" term
    -  "short" - e.g. "ed."/"eds." for the "editor" term
    -  "verb-short" - e.g. "ed." for the "editor" term
    -  "symbol" - e.g. "§" for the singular "section" term

``plural``
    Sets pluralization of the term, with allowed values:
    
    -  "contextual" - (default), pluralization depends on the
       variable content, e.g. "page 1" and "pages 1-3"
    -  "always" - always use the plural form, e.g. "pages 1" and "pages 1-3"
    -  "never" - always use the singular form, e.g. "page 1" and "page 1-3"

Group
~~~~~

The ``cs:group`` rendering element must contain one or more `rendering
elements`_ (with the exception of ``cs:layout``). ``cs:group`` may carry the
`delimiter`_ attribute to separate its child elements, as well as `affixes`_ and
`display`_ attributes (applied to the output of the group as a whole) and
`formatting`_ attributes (transmitted to the enclosed elements). ``cs:group``
implicitly acts as a conditional: ``cs:group`` and its child elements are
suppressed if a) at least one rendering element in ``cs:group`` calls a variable
(either directly or via a macro), and b) all variables that are called are
empty. This accommodates descriptive ``cs:text`` elements. For example,

.. sourcecode:: xml

    <layout>
      <group delimiter=" ">
        <text term="retrieved"/>
        <text term="from"/>
        <text variable="URL"/>
      </group>
    </layout>

can result in "retrieved from http://dx.doi.org/10.1128/AEM.02591-07", but
doesn't generate output when the "URL" variable is empty.

Choose
~~~~~~

The ``cs:choose`` rendering element allows for conditional rendering of
`rendering elements`_. An example that renders the "issued" date variable when
it exists, and the "no date" term when it doesn't:

.. sourcecode:: xml

    <choose>
      <if variable="issued">
        <date variable="issued" form="numeric"/>
      </if>
      <else>
        <text term="no date"/>
      </else>
    </choose>

``cs:choose`` requires a ``cs:if`` child element, which may be followed by one
or more ``cs:else-if`` child elements, and an optional closing ``cs:else`` child
element. The ``cs:if`` and ``cs:else-if`` elements may contain any number of
`rendering elements`_ (except for ``cs:layout``). As an empty cs:else element
would be superfluous, ``cs:else`` must contain at least one rendering element.
``cs:if`` and ``cs:else-if`` elements must carry one or more conditions, which
are set with the attributes:

``disambiguate``
    When set to "true" (the only allowed value), the content of element is
    rendered if it disambiguates two otherwise identical citations. This attempt
    at `disambiguation`_ is only made when all other disambiguation methods have
    failed to uniquely identify the target source.

``is-numeric``
    Tests whether the given variables (`Appendix I - Variables`_) contain
    numeric text.
    
``is-uncertain-date``
    Tests whether the given `date variables`_ contain `uncertain dates`_.
    
``locator``
    Tests whether the locator matches the given locator types (see `Locators`_).

``position``
    Tests whether the cite position matches the given positions (terminology:
    citations consist of one or more cites to individual items) When called
    within the scope of cs:bibliography, ``position`` tests "false". The
    positions that can be tested are:
   
    - "first": position of cites that are the first to reference an item
    - "ibid"/"ibid-with-locator"/"subsequent": cites referencing previously
      cited items have the "subsequent" position. Such cites may also have the
      "ibid" or "ibid-with-locator" position when:
      
      a) the current cite immediately follows on another cite, within the same
         citation, that references the same item
           
      or
      
      b) the current cite is the first cite in the citation, and the previous
         citation consists of a single cite referencing the same item
           
      If either requirement is met, the presence of locators determines which
      position is assigned:

      - **Preceding cite does not have a locator**: if the current cite has a
        locator, the position of the current cite is "ibid-with-locator".
        Otherwise the position is "ibid".
      - **Preceding cite does have a locator**: if the current cite has the same
        locator, the position of the current cite is "ibid". If the locator
        differs the position is "ibid-with-locator". If the current cite lacks a
        locator its only position is "subsequent".
         
    - "near-note": position of a cite following another cite referencing the
      same item. Both cites have to be located in foot or endnotes, and the
      distance between both cites may not exceed the maximum distance (measured
      in number of foot or endnotes) set with the ``near-note-distance`` option
      (see `Note Distance`_).
      
    Whenever position="ibid-with-locator" tests true, position="ibid" also tests
    true. And whenever position="ibid" or position="near-note" test true,
    position="subsequent" also tests true.

``type``
    Tests whether the item matches the given types (`Appendix II - Types`_).

``variable``
    Tests whether the default (long) forms of the given variables (`Appendix I -
    Variables`_) contain non-empty values.

With the exception of ``disambiguate``, all conditions allow for multiple test
values (separated with spaces, e.g. "book thesis").

The ``cs:if`` and ``cs:else-if`` elements may carry the ``match`` attribute to
control the testing logic, with allowed values:

-  "all" - (default), element only tests "true" when all conditions test "true"
   for all given test values
-  "any" - element tests "true" when any condition tests "true" for any given
   test value
-  "none" - element only tests "true" when none of the conditions test "true"
   for any given test value

Style Behavior
--------------

Options
~~~~~~~

Styles may be configured with `citation-specific options`_, set as attributes on
set on ``cs:citation``, `bibliography-specific options`_, set on
``cs:bibliography``, and `global options`_ (these affect both citations and the
bibliography), set on ``cs:style``. `Inheritable name options`_ may be set on
``cs:style``, ``cs:citation`` and ``cs:bibliography``. Finally, `locale
options`_ may be set on ``cs:locale`` elements.

Citation-specific Options
^^^^^^^^^^^^^^^^^^^^^^^^^

Disambiguation
''''''''''''''

Cites can be disambiguated in five ways:

1. The number of names shown can be increased.
2. Given names can be added.
3. Initials can be replaced with full given names.
4. A year-suffix can be added.
5. The cite can be rendered with the ``disambiguate`` attribute of ``cs:choose``
   conditions testing "true".

In addition to disambiguating cites that otherwise would be the same, steps (2)
and (3) may also be used for the broader purpose of disambiguating *names*
throughout the document. This distinction is indicated below as "the scope of
names transformation".

The five disambiguation methods are activated with the following optional
attributes (selected methods are always tried in the order listed below):

``disambiguate-add-names`` [Step (1)]
    If set to "true" ("false" is the default), names that would otherwise be
    hidden as a result of et-al abbreviation are added one by one, until either
    disambiguation is achieved, or all names are shown.

``disambiguate-add-givenname`` [Steps (2) & (3)]
    If set to "true" ("false" is the default), given names are added or
    expanded. For example:

    ================================  ===================================
    Original form                     Disambiguated form
    ================================  ===================================
    (Simpson 2005; Simpson 2005)      (H. Simpson 2005; B. Simpson 2005)
    (Doe 1950; Doe 1950)              (John Doe 1950; Jane Doe 1950)
    ================================  ===================================

    The value of the ``givenname-disambiguation-rule`` attribute determines a)
    the precise method of name expansion, and b) whether unambiguous cites that
    contain ambiguous names are targeted by this type of disambiguation.

``givenname-disambiguation-rule``
    This attribute specifies the scope of names transformation within the
    document, how individual names are transformed, and the names within a cite
    that are affected.

    **The scope of names transformation**
        With a value of "all-names", "all-names-with-initials", "primary-name",
        or "primary-name-with-initials", disambiguation is attempted for all
        ambiguous names, even for unambiguous cites. Here, disambiguation of
        cites is incidental to the disambiguation of names.

        With a value of "by-cite", disambiguation is limited to names within
        ambiguous cites.

    **Transformation of individual names**
          Individual names can be disambiguated through the following steps
          (which steps are followed depends on the value of
          ``givenname-disambiguation-rule``):

          1. If ``initialize-with`` is set, then:

             \(a) A ``form`` value of "short" can first be incremented to "long"
             (e.g. "Doe" becomes "J. Doe").
             
             \(b) ``initialize-with`` can be ignored (e.g. "J. Doe" becomes
             "John Doe").

          2. If ``initialize-with`` is *not* set, then the ``form`` value of
             "short" can be immediately incremented to "long" (e.g. "Doe"
             becomes "John Doe").
    
    **Given name disambiguation rules**
        For all five given name disambiguation rules, described below, names are
        only transformed if they lead to disambiguation. When name
        transformation results in disambiguation, any names that were added by
        ``disambiguate-add-names`` that follow the disambiguating name are
        discarded. When name transformation does not result in disambiguation,
        all names added by ``disambiguate-add-names`` are discarded.

        "all-names"
            Default value. Names that are rendered the same in multiple cites
            (e.g. "Doe 2000" and "Doe 2001") are progressively transformed until
            they are disambiguated (e.g. "A. Doe 2000" and "B. Doe 2001"). If
            disambiguation cannot be achieved, the names return to their
            original form.

        "all-names-with-initials"
            Same as "all-names", but limited to step 1(a). If
            ``initialize-with`` is not set, no disambiguation attempt is made.

        "primary-name"
            Same as "all-names", but ambiguity is only checked for the
            first-listed name, and only first-listed names are subjected to
            transformation.

        "primary-name-with-initials"
            Same as "primary-name", but limited to step 1(a). If
            ``initialize-with`` is not set, no disambiguation attempt is made.

        "by-cite"
            Same as "all-names", but name transformation is limited to ambiguous
            cites. Ambiguous names in unambiguous cites are not subject to
            transformation.

``disambiguate-add-year-suffix`` [Step (4)]
    If set to "true" ("false" is the default), a year-suffix is added to
    ambiguous cites (e.g. "Doe 2007, Doe 2007" becomes "Doe 2007a, Doe 2007b").
    The placement of the year-suffix, by default appended to each cite, can be
    controlled by explictly rendering the "year-suffix" variable using
    ``cs:text``.

For cites that could not be disambiguated by steps 1-4, a final attempt at
disambiguation is performed by rendering the cite with the ``disambiguate``
condition testing "true" [Step (5)] (see `Choose`_).

Citation Collapsing
'''''''''''''''''''

``collapse``
    Activates citation collapsing. Allowed values:
    
    -  "citation-number" - collapses numeric citation ranges (e.g. from "[1, 2,
       3, 5]" to "[1-3, 5]"). Only increasing ranges are collapsed, e.g. "[3, 2,
       1]" will not collapse (to see how to sort cites by their
       ``citation-number`` variable, see `Sorting`_).
    -  "year" - when consecutive cites share the same names in the rendered name
       variables, subsequent cites are collapsed to only a year, e.g. from "(Doe
       2000, Doe 2001)" to "(Doe 2000, 2001)".
    -  "year-suffix" - collapses as "year", but also collapses repeating years
       to only the year-suffix, e.g. "(Doe 2000a, b)" instead of "(Doe 2000a,
       2000b)".
    -  "year-suffix-ranged" - collapses as "year-suffix", but also collapses
       ranges of year-suffix markers, e.g. "(Doe 2000a-c,e)" instead of "(Doe
       2000a, b, c, e)".

``year-suffix-delimiter``
    Specifies the delimiter for year-suffix elements (defaults to the delimiter
    set on ``cs:layout`` in ``cs:citation``). E.g. with ``collapse`` set to
    "year-suffix", the ``delimiter`` on ``cs:layout`` in ``cs:citation`` set to
    "; ", and the ``year-suffix-delimiter`` set to ",", citations look like
    "(Smith 1999a,b; 2000; Jones 2001)".

``after-collapse-delimiter``
    Specifies the cite delimiter to be used *after* a group of collapsed cites.
    E.g. with ``collapse`` set to "year-suffix", the ``delimiter`` on
    ``cs:layout`` in ``cs:citation`` set to ", ", and
    ``after-collapse-delimiter`` set to "; ", citations look like "(Smith 1999a,
    b, 2000; Jones 2001, Brown 2007)".

Note Distance
'''''''''''''

``near-note-distance``
    A cite tests true for the "near-note" position (see `Choose`_) when a
    preceding note exists that a) refers to the same item and b) does not
    precede the current note by more footnotes or endnotes than the value of
    ``near-note-distance`` (default value is "5").

Bibliography-specific Options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Whitespace
''''''''''

``hanging-indent``
    If set to "true" ("false" is the default), bibliographic entries are
    rendered with hanging-indents.

``second-field-align``
    If set, subsequent lines of bibliographic entries are aligned along the
    second field. With "flush", the first field is flush with the margin. With
    "margin", the first field is put in the margin, and subsequent lines are
    aligned with the margin. An example, where the first field is ``<text
    variable="citation-number" suffix=". "/>``:
    
    ::
    
        9.  Adams, D. (2002). The Ultimate Hitchhiker's Guide to the
            Galaxy (1st ed.).
        10. Asimov, I. (1951). Foundation.

``line-spacing``
    Specifies vertical line distance. Defaults to "1" (single-spacing), and can
    be set to any non-negative integer to specify a multiple of the standard
    unit of line height (e.g. "2" for double-spacing).

``entry-spacing``
    Specifies vertical distance between bibliographic entries. By default (with
    a value of "1"), entries are separated by a single additional line-height
    (as set by the line-spacing attribute). Can be set to any non-negative
    integer to specify a multiple of this amount.

Reference Grouping
''''''''''''''''''

``subsequent-author-substitute``
    If set, the text string value of this attribute replaces the names in a
    bibliographic entry, when these names are identical to those in the
    preceding bibliographic entry. Substitution is limited to the first
    ``cs:names`` element rendered. An example, with
    ``subsequent-author-substitute`` set to "---":
    
    ::
    
        Asimov. Foundation, 1951.
        ---. Foundation and Empire, 1952.
        ---. Second Foundation, 1953.

Global Options
^^^^^^^^^^^^^^

Hyphenation of Initialized Names
''''''''''''''''''''''''''''''''

``initialize-with-hyphen``
    Specifies whether compound given names (e.g. "Jean-Luc") should be
    initialized with a hyphen ("J.-L.", value "true", default) or without
    ("J.L.", value "false").

Page Ranges
'''''''''''

``page-range-format``
    Specifies the format of page ranges: "expanded" (e.g. "321-328"), "minimal"
    ("321-8"), or "chicago" ("321-28") (for detailed format descriptions, see
    `Appendix IV - Page Range Formats`_). If the attribute is not set, page
    ranges are rendered without reformatting.

Name Particles
''''''''''''''

Western names frequently contain one or more name particles (e.g. "de" in the
Dutch name "W. de Koning"). These name particles can be either kept or dropped
when only the surname is shown: these two types are referred to as non-dropping
and dropping particles, respectively. A single name can contain particles of
both types (with non-dropping particles always following dropping particles).
For example, "W. de Koning" and the French name "Jean de La Fontaine" can be
deconstructed into:
    
    ::
    
        {
            "author": [
                {
                    "given": "W.",
                    "non-dropping-particle": "de",
                    "family": "Koning"
                },
                {
                    "given": "Jean",
                    "dropping-particle": "de",
                    "non-dropping-particle": "La",
                    "family": "Fontaine"
                } 
            ]
        }

When just the surname is shown, only the non-dropping-particle is kept: "De
Koning" and "La Fontaine".

In the case of inverted names, where the family name precedes the given name,
the dropping-particle is always appended to the family name, but the
non-dropping-particle can be either prepended (e.g. "de Koning, W.") or appended
(after initials or given names, e.g. "Koning, W. de"). For inverted names where
the non-dropping-particle is prepended, names can either be sorted by keeping
the non-dropping-particle together with the family name as part of the primary
sort key (sort order A), or by separating the non-dropping-particle from the
family name and have it become (part of) a secondary sort key, joining the
dropping-particle, if available (sort order B):

**Sort order A: non-dropping-particle not demoted**

-  primary sort key: "La Fontaine"
-  secondary sort key: "de"
-  tertiary sort key: "Jean"

**Sort order B: non-dropping-particle demoted**

-  primary sort key: "Fontaine"
-  secondary sort key: "de La"
-  tertiary sort key: "Jean"

The handling of the non-dropping-particle can be customized with the
``demote-non-dropping-particle`` option:

``demote-non-dropping-particle``
    Sets the display and sorting behavior of the non-dropping-particle in
    inverted names (e.g. "Koning, W. de"). Allowed values:
    
    -  "never": the non-dropping-particle is treated as part of the family name,
       whereas the dropping-particle is appended (e.g. "de Koning, W.", "La
       Fontaine, Jean de"). The non-dropping-particle is part of the primary
       sort key (sort order A, e.g. "de Koning, W." appears under "D").
    -  "sort-only": same display behavior as "never", but the
       non-dropping-particle is demoted to a secondary sort key (sort order B,
       e.g. "de Koning, W." appears under "K").
    -  "display-and-sort" (default): the dropping and non-dropping-particle are
       appended (e.g. "Koning, W. de" and "Fontaine, Jean de La"). For name
       sorting, all particles are part of the secondary sort key (sort order B,
       e.g. "Koning, W. de" appears under "K").

Some names include a particle that should never be demoted. For these cases the
particle should just be included in the family name field, for example for the
French general Charles de Gaulle:

    ::
    
        {
            "author": [
                {
                    "family": "de Gaulle",
                    "given": "Charles"
                }   
            ]
        }

Inheritable Name Options
^^^^^^^^^^^^^^^^^^^^^^^^

Attributes for the ``cs:names`` and ``cs:name`` elements may also be set on
``cs:style``, ``cs:citation`` and ``cs:bibliography``. This eliminates the need
to repeat the same attributes and attribute values for every occurrence of the
``cs:names`` and ``cs:name`` elements.

The available inheritable attributes for ``cs:name`` are ``and``,
``delimiter-precedes-et-al``, ``delimiter-precedes-last``, ``et-al-min``,
``et-al-use-first``, ``et-al-use-last``, ``et-al-subsequent-min``,
``et-al-subsequent-use-first``, ``initialize-with``, ``name-as-sort-order`` and
``sort-separator``. The attributes ``name-form`` and ``name-delimiter``
correspond to the ``form`` and ``delimiter`` attributes on ``cs:name``.
Similarly, ``names-delimiter`` corresponds to the ``delimiter`` attribute on
``cs:names``.

When an inheritable name attribute is set on ``cs:style``, ``cs:citation`` or
``cs:bibliography``, its value is used for all ``cs:names`` elements within the
scope of the element carrying the attribute. If an attribute is set on multiple
hierarchical levels, the value set at the lowest level is used.

Locale Options
^^^^^^^^^^^^^^

``punctuation-in-quote``
    For ``cs:text`` elements rendered with the ``quotes`` attribute set to
    "true" (see `Formatting`_), and for which the output is followed by a comma
    or period, ``punctuation-in-quote`` specifies whether this punctuation is
    placed outside (value "false", default) or inside (value "true") the closing
    quotation mark.
    
Sorting
~~~~~~~

``cs:citation`` and ``cs:bibliography`` may include a ``cs:sort`` child element
before the ``cs:layout`` element to specify the sorting order of respectively
cites within citations, and bibliographic entries within the bibliography. In
the absence of ``cs:sort``, cites and bibliographic entries appear in the order
in which they are cited.

The ``cs:sort`` element must contain one or more ``cs:key`` child elements. The
sort key, set as an attribute on ``cs:key``, must be a variable (see `Appendix I
- Variables`_) or macro name. For each ``cs:key`` element, the sort direction
can be set to either "ascending" (default) or "descending" with the ``sort``
attribute. The attributes ``names-min``, ``names-use-first``, and
``names-use-last`` may be used to override the values of the corresponding
``et-al-min``/``et-al-subsequent-min``,
``et-al-use-first``/``et-al-subsequent-use-first`` and ``et-al-use-last``
attributes, and affect all names generated via macros called by ``cs:key``.

Sort keys are evaluated in sequence. A primary sort is performed on all items
using the first sort key. A secondary sort, using the second sort key, is
applied to items sharing the first sort key value. A tertiary sort, using the
third sort key, is applied to items sharing the first and second sort key
values. Sorting continues until either the order of all items is fixed, or until
the sort keys are exhausted. Items with an empty sort key value are placed at
the end of the sort, both for ascending and descending sorts.

An example, where cites are first sorted by the output of the "author" macro,
with overriding settings for et-al abbreviation. Cites sharing the primary sort
key are subsequently sorted in descending order by the "issued" date variable.

.. sourcecode:: xml

    <citation>
      <sort>
        <key macro="author" names-min="3" names-use-first="3"/>
        <key variable="issued" sort="descending"/>
      </sort>
      <layout>
        <!-- rendering elements -->
      </layout>
    </citation>

The sort key value of a variable or macro can differ from the "normal" rendered
output. The specifics of sorting variables and macros:

Sorting Variables
^^^^^^^^^^^^^^^^^

The sort key value for a variable called by ``cs:key`` via the ``variable``
attribute consists of the string value, without rich text markup. Exceptions are
name, date and numeric variables:

**names:** `Name variables`_ called via the ``variable`` attribute (e.g. ``<key
variable="author"/>``) are returned as a name list string, with the ``cs:name``
attributes ``form`` set to "long", and ``name-as-sort-order`` set to "all".

**dates:** `Date variables`_ called via the ``variable`` attribute are returned
in the YYYYMMDD format, with zeros substituted for any missing date-parts (e.g.
20001200 for December 2000). As a result, less specific dates precede more
specific dates in ascending sorts, e.g. "2000, May 2000, May 1st 2000". Negative
years are sorted inversely, e.g. "100BC, 50BC, 50AD, 100AD". Seasons are ignored
for sorting, as the chronological order of the seasons differs between the
northern and southern hemispheres. In the case of date ranges, the start date is
used for the primary sort, and the end date is used for a secondary sort, e.g.
"2000-2001, 2000-2005, 2002-2003, 2002-2009". Date ranges are placed after
single dates when they share the same (start) date, e.g. "2000, 2000-2002".

**numbers:** `Number variables`_ called via the ``variable`` attribute are
returned as integers (``form`` is "numeric"). If the original variable value
only consists of non-numeric text, the value is returned as a text string.

Sorting Macros
^^^^^^^^^^^^^^

The sort key value for a macro called via ``cs:key`` via the ``macro`` attribute
generally consists of the string value the macro would ordinarily generate,
without rich text markup (exceptions are discussed below).

For name sorting, there are four advantages in using the same macro for
rendering and sorting, instead of sorting directly on the name variable. First,
substitution is available (e.g. the "editor" variable might substitute for an
empty "author" variable). Secondly, et-al abbreviation can be used (using either
the ``et-al-min``/``et-al-subsequent-min``,
``et-al-use-first``/``et-al-subsequent-use-first``, and ``et-al-use-last``
options defined for the macro, or the overriding ``names-min``,
``names-use-first`` and ``names-use-last`` attributes set on ``cs:key``). When
et-al abbreviation occurs, the "et-al" and "and others" terms are excluded from
the sort key values. Thirdly, names can be sorted by just the surname (using a
macro for which the ``form`` attribute on ``cs:name`` is set to "short").
Finally, it is possible to sort by the number of names in a name list, by
calling a macro for which the ``form`` attribute on ``cs:name`` is set to
"count". As for names sorted via the ``variable`` attribute, names sorted via
``macro`` are returned with the ``cs:name`` attribute ``name-as-sort-order`` set
to "all".

`Number variables`_ rendered within the macro with ``cs:number`` and `date
variables`_ are treated the same as when they are called via ``variable``. The
only exception is that the complete date is returned if a date variable is
called via the ``variable`` attribute. In contrast, macros return only those
date-parts that would otherwise be rendered (respecting the value of the
``date-parts`` attribute for localized dates, or the listing of ``cs:date-part``
elements for non-localized dates).

Formatting
~~~~~~~~~~

The following formatting attributes may be set on ``cs:date``, ``cs:date-part``,
``cs:et-al``, ``cs:group``, ``cs:label``, ``cs:layout``, ``cs:name``,
``cs:name-part``, ``cs:names``, ``cs:number`` and ``cs:text``:

``font-style``
    Sets the font style, with values:
    
    -  "normal" (default)
    -  "italic"
    -  "oblique" (i.e. slanted)

``font-variant``
    Allows for the use of small capitals, with values:
    
    -  "normal" (default)
    -  "small-caps"

``font-weight``
    Sets the font weight, with values:
    
    -  "normal" (default)
    -  "bold"
    -  "light"

``text-decoration``
    Allows for the use of underlining, with values:
    
    -  "none" (default)
    -  "underline"

``vertical-align``
    Sets the vertical alignment, with values:
    
    -  "baseline" (default)
    -  "sup" (superscript)
    -  "sup" (subscript)

Affixes
~~~~~~~

The affixes attributes ``prefix`` and ``suffix`` may be set on ``cs:date``
(except when ``cs:date`` defines a localized date format), ``cs:date-part``
(except when the parent ``cs:date`` element calls a localized date format),
``cs:et-al``, ``cs:group``, ``cs:label``, ``cs:layout``, ``cs:name``,
``cs:name-part``, ``cs:names``, ``cs:number`` and ``cs:text``. The attribute
value is either added before (``prefix``) or after (``suffix``) the output of
the element carrying the attribute, but affixes are only rendered if the element
produces output. With the exception of affixes set on ``cs:layout``, affixes are
outside the scope of `formatting`_, `quotes`_, `strip-periods`_ and `text-case`_
attributes set on the same element (as a workaround, these attributes take
effect on affixes when set on a parent ``cs:group`` element).

Delimiter
~~~~~~~~~

The ``delimiter`` attribute, whose value delimits non-empty pieces of output,
may be set on ``cs:date`` (delimiting the date-parts; ``delimiter`` is not
allowed when ``cs:date`` calls a localized date format), ``cs:names``
(delimiting name lists from different `name variables`_), ``cs:name``
(delimiting names within name lists), ``cs:group`` and ``cs:layout`` (delimiting
the output of the child elements).

Display
~~~~~~~

The ``display`` attribute (similar the "display" property in CSS) may be used to
structure individual bibliographic entries into one or more text blocks. If
used, all rendering elements should be under the control of a display attribute.
The allowed values:

- "block" - block stretching from margin to margin.
- "left-margin" - block starting at the left margin. If followed by a
  "right-inline" block, the "left-margin" blocks of all bibliographic entries
  are set to a fixed width to accommodate the longest content string found among
  these "left-margin" blocks. In the absence of a "right-inline" block the
  "left-margin" block extends to the right margin.
- "right-inline" - block starting to the right of a preceding "left-margin"
  block (behaves as "block" in the absence of such a "left-margin" block).
  Extends to the right margin.
- "indent" - block indented to the right by a standard amount. Extends to the
  right margin.

**Examples** 

(A) Instead of using ``second-field-align`` (see `Whitespace`_), a similar
    layout can be achieved with a "left-margin" and "right-inline" block. A
    potential benefit is that the styling of blocks can be further controlled in
    the final output (e.g. using CSS for HTML, styles for Word, etc.).
    
    .. sourcecode:: xml
    
        <bibliography>
          <layout>
            <text display="left-margin" variable="citation-number"
                prefix="[" suffix="]"/>
            <group display="right-inline">
              <!-- citation rendering elements -->
            </group>
          </layout>
        </bibliography>

----

(B) A per-author publication listing. With ``subsequent-author-substitute`` (see
    `Reference Grouping`_) set to an empty string , the block with the author
    names is only rendered once for items by the same authors.

    .. sourcecode:: xml
    
        <bibliography subsequent-author-substitute="">
          <sort>
            <key variable="author"/>
            <key variable="issued"/>
          </sort>
          <layout>
            <group display="block">
              <names variable="author"/>
            </group>
            <group display="left-margin">
              <date variable="issued">
                <date-part name="year" />
              </date>
            </group>
            <group display="right-inline">
              <text variable="title"/>
            </group>
          </layout>
        </bibliography>
    
    The output of this example would look like:
    
    +-------------------+-----------------------+
    | Author1                                   |
    +-------------------+-----------------------+
    | year-publication1 | title-publication1    |
    +-------------------+-----------------------+
    | year-publication2 | title-publication2    |
    +-------------------+-----------------------+
    | Author2                                   |
    +-------------------+-----------------------+
    | year-publication3 | title-publication3    |
    +-------------------+-----------------------+
    | year-publication4 | title-publication4    |
    +-------------------+-----------------------+

----

(C) An annotated bibliography, where the annotation appears in an indented block
    below the reference.
    
    .. sourcecode:: xml
    
        <bibliography>
          <layout>
            <group display="block">
              <!-- citation rendering elements -->
            </group>
            <text display="indent" variable="abstract" />
          </layout>
        </bibliography>

Quotes
~~~~~~

The ``quotes`` attribute may set on ``cs:text``. When set to "true" ("false" is
default), the rendered text is wrapped in quotes (the quotation marks used are
terms). The localized ``punctuation-in-quote`` option controls whether
an adjoining comma or period appears outside (default) or inside the closing
quotation mark (see `Locale Options`_).

Strip-periods
~~~~~~~~~~~~~

The ``strip-periods`` attribute may be set on ``cs:date-part`` (but only if
``name`` is set to "month"), ``cs:label`` and ``cs:text``. When set to "true"
("false" is the default), any periods in the rendered text are removed.

Text-case
~~~~~~~~~

The ``text-case`` attribute may be set on ``cs:date-part``, ``cs:label``,
``cs:name-part``, ``cs:number`` and ``cs:text``. The allowed values:

-  "lowercase": renders text in lower case
-  "uppercase": renders text in upper case
-  "capitalize-first": capitalizes the first character (other
   characters remain in their original case)
-  "capitalize-all": capitalizes the first character of every word (other
   characters remain in their original case)
-  "sentence": renders text in sentence case
-  "title": renders text in title case

Title Case Conversion
^^^^^^^^^^^^^^^^^^^^^

Non-English Items
'''''''''''''''''

As many languages do not use title case, title case conversion (with
``text-case`` set to "title") only affects English-language items.

If the ``default-locale`` attribute on ``cs:style`` isn't set, or set to a
locale code with a primary language tag of "en" (English), items are assumed to
be English. An item is only considered to be non-English if its metadata
contains a ``language`` field with a non-nil value that doesn't start with the
"en" primary language tag.

If ``default-locale`` is set to a locale code with a primary language tag other
than "en", items are assumed to be non-English. An item is only considered to be
English if the value of its ``language`` field starts with the "en" primary
language tag.

Title Case Algorithm
''''''''''''''''''''

Title case conversion (with ``text-case`` set to "title") for English-language
items is performed by:

1. For upper case strings, only the first letter of each word is left
   capitalized.

2. For lower or mixed case strings, words in upper case are left untouched. For
   words in lower or mixed case the first letter is capitalized.
   
In both cases, stop words are lowercased, unless they are the first or last word
in the string, or follow a colon. The stop words are "a", "an", "and", "as",
"at", "but", "by", "down", "for", "from", "in", "into", "nor", "of", "on",
"onto", "or", "over", "so", "the", "till", "to", "up", "via", "with", and "yet".

Appendices
----------

Appendix I - Variables
~~~~~~~~~~~~~~~~~~~~~~

Standard Variables
^^^^^^^^^^^^^^^^^^

abstract
    abstract of the item (e.g. the abstract of a journal article)

annote
    reader's notes about the item content

archive
    archive storing the item

archive\_location
    storage location within an archive (e.g. a box and folder number)

archive-place
    geographic location of the archive

authority
    issuing or judicial authority (e.g. "USPTO" for a patent, "Fairfax Circuit
    Court" for a legal case)

call-number
    call number (to locate the item in a library)

chapter-number
    chapter number

citation-label
    label identifying the item in in-text citations of label styles (e.g.
    "Ferr78"). May be assigned by the CSL processor based on item metadata.

citation-number
    index (starting at 1) of the cited reference in the bibliography (generated
    by the CSL processor)

collection-number
    number identifying the collection holding the item (e.g. the series number
    for a book)

collection-title
    title of the collection holding the item (e.g. the series title for a book)

container-title
    title of the container holding the item (e.g. the book title for a book
    chapter, the journal title for a journal article)

DOI
    Digital Object Identifier (e.g. "10.1128/AEM.02591-07")

edition
    (container) edition holding the item (e.g. "3" when citing a chapter in the
    third edition of a book)

event
    name of the related event (e.g. the conference name when citing a conference
    paper)

event-place
    geographic location of the related event (e.g. "Amsterdam, the Netherlands")

first-reference-note-number
    number of a preceding note containing the first reference to the item.
    Assigned by the CSL processor. The variable holds no value for
    non-note-based styles, or when the item hasn't been cited in any preceding
    notes.

genre
    class, type or genre of the item (e.g. "adventure" for an adventure movie,
    "PhD dissertation" for a PhD thesis)

ISBN
    International Standard Book Number

issue
    (container) issue holding the item (e.g. "5" when citing a journal article
    from journal volume 2, issue 5)

jurisdiction
    geographic scope of relevance (e.g. "US" for a US patent)

keyword
    keyword(s) or tag(s) attached to the item

locator
    locates information within the item (e.g. a page in a cited book, or a
    volume in a cited multi-volume work)

medium
    medium description (e.g. "CD", "DVD", etc.)

note
    (short) inline note giving additional item details (e.g. a concise summary
    or commentary)

number
    number identifying the item (e.g. a report number)

number-of-pages
    total number of pages of the cited item

number-of-volumes
    total number of volumes, usable for citing multi-volume books and such

original-publisher
    original publisher, for items that have been republished by a different
    publisher

original-publisher-place
    geographic location of the original publisher (e.g. "London, UK")

original-title
    title of the original version (e.g. "Война и мир", the untranslated Russian
    title of "War and Peace")

page
    range of pages the item (e.g. a journal article) covers in a container (e.g.
    a journal issue)

page-first
    first page of the range of pages the item (e.g. a journal article) covers in
    a container (e.g. a journal issue)

publisher
    publisher

publisher-place
    geographic location of the publisher

references
    resources related to the procedural history of a legal case

section
    container section holding the item (e.g. "politics" for a newspaper article)

status
    (publication) status of the item (e.g. "forthcoming")

title
    primary title of the item

URL
    Uniform Resource Locator (e.g.
    "http://aem.asm.org/cgi/content/full/74/9/2766")

version
    version of the item (e.g. "2.0.9" for a software program)

volume
    (container) volume holding the item (e.g. "2" when citing a chapter from
    book volume 2)

year-suffix
    disambiguating year suffix in author-date styles (e.g. "a" in "Doe, 1999a")

Date Variables
^^^^^^^^^^^^^^

accessed
    date the item has been accessed

container
    ?

event-date
    date the related event took place

issued
    date the item was issued/published

original-date
    (issue) date of the original version

submitted
    date the item (e.g. a manuscript) has been submitted for publication

Name Variables
^^^^^^^^^^^^^^

author
    author
    
collection-editor
    editor of the collection holding the item (e.g. the series editor for a
    book)

composer
    composer (e.g. of a musical score)

container-author
    author of the container holding the item (e.g. the book author for a book
    chapter)

editor
    editor

editorial-director
    managing editor ("Directeur de la Publication" in French)

interviewer
    interviewer (e.g. of an interview)

original-author
    ?

recipient
    recipient (e.g. of a letter)

translator
    translator

Number Variables
^^^^^^^^^^^^^^^^

See `Standard Variables`_ for variable descriptions.

- edition
- issue
- number
- number-of-volumes
- volume

Appendix II - Types
~~~~~~~~~~~~~~~~~~~

-  article
-  article-magazine
-  article-newspaper
-  article-journal
-  bill
-  book
-  broadcast
-  chapter
-  entry
-  entry-dictionary
-  entry-encyclopedia
-  figure
-  graphic
-  interview
-  legislation
-  legal\_case
-  manuscript
-  map
-  motion\_picture
-  musical\_score
-  pamphlet
-  paper-conference
-  patent
-  post
-  post-weblog
-  personal\_communication
-  report
-  review
-  review-book
-  song
-  speech
-  thesis
-  treaty
-  webpage

Appendix III - Terms
~~~~~~~~~~~~~~~~~~~~

Categories
^^^^^^^^^^

-  anthropology
-  astronomy
-  biology
-  botany
-  chemistry
-  communications
-  engineering
-  generic-base - used for generic styles like Harvard and APA
-  geography
-  geology
-  history
-  humanities
-  law
-  linguistics
-  literature
-  math
-  medicine
-  philosophy
-  physics
-  political\_science
-  psychology
-  science
-  social\_science
-  sociology
-  theology
-  zoology

Locators
^^^^^^^^

-  book
-  chapter
-  column
-  figure
-  folio
-  issue
-  line
-  note
-  opus
-  page
-  paragraph
-  part
-  section
-  sub verbo
-  verse
-  volume

Months
^^^^^^

-  month-01
-  month-02
-  month-03
-  month-04
-  month-05
-  month-06
-  month-07
-  month-08
-  month-09
-  month-10
-  month-11
-  month-12

Ordinals
^^^^^^^^

-  ordinal-01
-  ordinal-02
-  ordinal-03
-  ordinal-04
-  long-ordinal-01
-  long-ordinal-02
-  long-ordinal-03
-  long-ordinal-04
-  long-ordinal-05
-  long-ordinal-06
-  long-ordinal-07
-  long-ordinal-08
-  long-ordinal-09
-  long-ordinal-10

Quotation marks
^^^^^^^^^^^^^^^

-  open-quote
-  close-quote
-  open-inner-quote
-  close-inner-quote

Roles
^^^^^

-  author
-  collection-editor
-  composer
-  container-author
-  editor
-  editorial-director
-  editortranslator
-  interviewer
-  original-author
-  recipient
-  translator

Seasons
^^^^^^^

-  season-01
-  season-02
-  season-03
-  season-04

Miscellaneous
^^^^^^^^^^^^^

-  accessed
-  ad
-  and
-  and others
-  anonymous
-  at
-  bc
-  by
-  circa
-  cited
-  edition
-  et-al
-  forthcoming
-  from
-  ibid
-  in
-  in press
-  internet
-  interview
-  letter
-  no date
-  online
-  presented at
-  reference
-  retrieved

Appendix IV - Page Range Formats
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The page abbreviation rules for the different values of the
``page-range-format`` attribute on ``cs:style`` are:

"minimum"
    All digits repeated in the second number are left out: 42-5, 321-8, 2787-816

"expanded"
    Abbreviated page ranges are expanded to their non-abbreviated form: 42-45,
    321-328, 2787-2816

"chicago"
    Page ranges are abbreviated according to the |link|
    `Chicago Manual of Style-rules <http://www.aahn.org/guidelines.html>`_:

Table: **Chicago Manual of Style page range abbreviation rules**

+------------------------+--------------------------+----------------+
| First number           | Second number            | Examples       |
+========================+==========================+================+
| Less than 100          | Use all digits           | 3-10; 71-72    |
+------------------------+--------------------------+----------------+
| 100 or multiple of 100 | Use all digits           | 100-104;       |
|                        |                          | 600-613;       |
|                        |                          | 1100-1123      |
+------------------------+--------------------------+----------------+
| 101 through 109 (in    | Use changed part only,   | 107-8; 505-17; |
| multiples of 100)      | omitting unneeded zeros  | 1002-6         |
+------------------------+--------------------------+----------------+
| 110 through 199 (in    | Use two digits, or more  | 321-25;        |
| multiples of 100)      | as needed                | 415-532;       |
|                        |                          | 11564-68;      |
|                        |                          | 13792-803      |
+------------------------+--------------------------+----------------+
| 4 digits               | If numbers are four      | 1496-1504;     |
|                        | digits long and three    | 2787-2816      |
|                        | digits change, use all   |                |
|                        | digits                   |                |
+------------------------+--------------------------+----------------+
